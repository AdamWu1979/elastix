#---------------------------------------------------------------------
# Sub project name

PROJECT( elxComponents )

#---------------------------------------------------------------------
# Set the libraries to be linked.

# Linux gave an error, if param was linked. This was only
# when we still used .dll's. I'm not sure if it will still
# give an error, but as long as linux does not complain
# about the missing param, just leave it out.
IF( UNIX )
  IF ( NOT APPLE )
    SET(elxLinkLibs
      xoutlib
      elxCommon
      elxCore
      ITKBasicFilters
      ITKNumerics
      ITKIO
      ITKCommon
      ITKStatistics )
  ENDIF( NOT APPLE )
ENDIF( UNIX )

# Interestingly, visual c++ and MAC-GCC do need param
IF( WIN32 OR APPLE )
  SET( elxLinkLibs
    param
    xoutlib
    elxCommon
    elxCore
    ITKBasicFilters
    ITKNumerics
    ITKIO
    ITKCommon
    ITKStatistics )
ENDIF( WIN32 OR APPLE )

#--------------------------------------------------------------------
# Prepare elxInstallComponentFunctionDeclarations.h and
# elxInstallComponentFunctionCalls.h
# In the ADD_ELXCOMPONENT macro a line is added
#

SET( InstallFunctionDeclarationFile
  ${elastix_BINARY_DIR}/elxInstallComponentFunctionDeclarations.h )
SET( InstallFunctionCallFile
  ${elastix_BINARY_DIR}/elxInstallComponentFunctionCalls.h )
  
FILE( WRITE ${InstallFunctionDeclarationFile} 
  "\n" "//This file is generated by CMake. Do not edit manually!\n\n" )
FILE( WRITE ${InstallFunctionCallFile}
  "\n" "//This file is generated by CMake. Do not edit manually!\n\n" )
 
 
#---------------------------------------------------------------------
# Macro that simplifies the addition of elx-components
# 
# Usage: 
# ADD_ELXCOMPONENT( <name_of_lib> <list_of_source_and_header_files> )
#
# The name_of_lib should be equal to the name of the elx class,
# which also should be the name used in the elxInstallMacro, in the
# the .cxx file of the component.
#

MACRO( ADD_ELXCOMPONENT name )
  # Compile this component or not
  SET ( defaultValue ON )
  IF ( ${ARGV1} STREQUAL "OFF" )
    SET ( defaultValue OFF )
  ENDIF ( ${ARGV1} STREQUAL "OFF" )
  MARK_AS_ADVANCED( USE_${name} )
  OPTION( USE_${name} "Compile this component" ${defaultValue} )

  IF( USE_${name} )
    # Create the list of files which create the library
    SET( filelist ${ARGN} )
    LIST( REMOVE_ITEM filelist "ON" "OFF" )

    # Create project and library
    PROJECT( ${name} )
    ADD_LIBRARY( ${name} STATIC ${filelist} )
    TARGET_LINK_LIBRARIES( ${name} ${elxLinkLibs} )

    # Update AllComponentLibsTemp, while avoiding duplicates:    
    IF( DEFINED AllComponentLibs )
      SET( dummy ${AllComponentLibs} )
      LIST( REMOVE_ITEM dummy ${name} )
      SET( dummy ${dummy} ${name} )      
    ELSE( DEFINED AllComponentLibs )
      SET( dummy ${name} )
    ENDIF ( DEFINED AllComponentLibs )    
    SET( AllComponentLibs ${dummy} CACHE INTERNAL "All component libraries for elastix/transformix" )
    
    # Write lines to two files
    FILE( APPEND ${InstallFunctionDeclarationFile}
      "elxInstallComponentFunctionDeclarationMacro( " ${name} " );\n\n" )
    FILE( APPEND ${InstallFunctionCallFile}
      "elxInstallComponentFunctionCallMacro( " ${name} " );\n\n" )

  ELSE( USE_${name} )
    # Remove from link list
    IF( DEFINED AllComponentLibs )
      SET( dummy ${AllComponentLibs} )
      LIST( REMOVE_ITEM dummy ${name} )
    ELSE( DEFINED AllComponentLibs )
      SET( dummy "" )
    ENDIF ( DEFINED AllComponentLibs )    
    SET( AllComponentLibs ${dummy} CACHE INTERNAL "All component libraries for elastix/transformix"  )
  ENDIF( USE_${name} )

ENDMACRO( ADD_ELXCOMPONENT )

#---------------------------------------------------------------------
# Search for all components
#

FILE( GLOB_RECURSE ListOfComponents "*/CMakeLists.txt" )

FOREACH( component ${ListOfComponents} )
  GET_FILENAME_COMPONENT( path_to_comp ${component} PATH )
  STRING( REGEX REPLACE "${elxComponents_SOURCE_DIR}/" "" relative_path_to_comp ${path_to_comp} )
  SUBDIRS( ${relative_path_to_comp} )
ENDFOREACH( component )

